<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EliteAPI</name>
    </assembly>
    <members>
        <member name="T:EliteAPI.Abstractions.IEliteDangerousAPI">
            <summary>
                EliteAPI
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.Version">
            <summary>
                EliteAPI's version
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.Events">
            <summary>
                Container for all events
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.Status">
            <summary>
            Container for the ship's current status
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.Ship">
            <summary>
            Container for the ship's current status
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.NavRoute">
            <summary>
            Container for the ship's current navigation route
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.IsRunning">
            <summary>
                Whether the api is currently running
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.HasCatchedUp">
            <summary>
                Whether the api has catched up on past event in this session
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IEliteDangerousAPI.InitializeAsync">
            <summary>
                Initializes the api
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IEliteDangerousAPI.StartAsync">
            <summary>
                Starts the api
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IEliteDangerousAPI.StopAsync">
            <summary>
                Stops the api
            </summary>
        </member>
        <member name="T:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration">
            <summary>
            Interface for the <see cref="T:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration"/> configuration class
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration.JournalPath">
            <summary>
            The active journal directory path
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration.Journal">
            <summary>
            The targeted journal file
            </summary>
        </member>
        <member name="T:EliteAPI.Configuration.EliteDangerousApiConfiguration">
            <summary>
            Standard implementation of the <see cref="T:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration"/> configuration class
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.JournalPath">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.Journal">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder">
            <summary>
            Creates a <see cref="T:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration"/> configuration class through a builder
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.AddEventModule``1">
            <summary>
                Add an event module to EliteAPI
            </summary>
            <typeparam name="T">The event module to be added</typeparam>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.ClearProcessors">
            <summary>
                Remove the default event processors
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.AddProcessor``1">
            <summary>
                Adds an event processor
            </summary>
            <typeparam name="T">The event processor to be used</typeparam>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseJournalDirectory(System.String)">
            <summary>
            Sets which directory to use as active journal directory
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseJournal(System.String)">
            <summary>
            Sets which journal file to use, defaults to latest if not invoked
            </summary>
        </member>
        <member name="T:EliteAPI.EliteDangerousAPI">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousAPI.#ctor(System.IServiceProvider)">
            <summary>
            Creates a new EliteDangerousAPI class
            </summary>
            <param name="services">ServiceProvider</param>
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.HasCatchedUp">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.Version">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.Events">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.Status">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.Ship">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.NavRoute">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousAPI.InitializeAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousAPI.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousAPI.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousAPIExtensions.AddEliteAPI(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder})">
            <summary>
                Adds all EliteAPI's necessary services to the <seealso cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Attributes.EliteDangerousEventAttribute">
            <summary>
            Class for modular events in EliteAPI
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Attributes.EliteDangerousEventAttribute.#ctor(System.Boolean)">
            <summary>
            Class for modular events in EliteAPI
            </summary>
            <param name="runOnCatchup">Whether to run this method while catching up</param>
        </member>
        <member name="P:EliteAPI.Event.Attributes.EliteDangerousEventAttribute.RunOnCatchup">
            <summary>
            Whether to run this method while catching up
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Models.Abstractions.EventBase">
            <summary>
                An in-game event
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.EventBase.Timestamp">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.EventBase.Event">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Models.Abstractions.IEvent">
            <summary>
                An in-game event
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.IEvent.Timestamp">
            <summary>
                The timestamp of the event
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.IEvent.Event">
            <summary>
                The name of the event
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Module.EliteDangerousEventModule">
            <summary>
            Wrapper for event modules
            </summary>
        </member>
        <member name="F:EliteAPI.Event.Module.EliteDangerousEventModule.EliteAPI">
            <summary>
            The Elite Dangerous API
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Module.EliteDangerousEventModule.#ctor(EliteAPI.Abstractions.IEliteDangerousAPI)">
            <summary>
            Wrapper for event modules
            </summary>
            <param name="api">The EliteDangerousAPI</param>
        </member>
        <member name="T:EliteAPI.Event.Processor.Abstractions.IEventProcessor">
            <summary>
                Invokes registered event-handlers
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.IEventProcessor.RegisterHandlers">
            <summary>
                Finds, registers, and caches the event-handlers
            </summary>
            <returns></returns>
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.IEventProcessor.InvokeHandler(EliteAPI.Event.Models.Abstractions.EventBase,System.Boolean)">
            <summary>
                Invokes the registered handler for this event
            </summary>
            <param name="eventBase">The event to be invoked</param>
            <param name="isWhileCatchingUp">Whether this event was ran before EliteAPI was started</param>
        </member>
        <member name="P:EliteAPI.Event.Processor.Abstractions.MethodEventProcessorBase.Cache">
            <summary>
                Methods to invoke, mapped to the name of a event
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.MethodEventProcessorBase.RegisterHandlers">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.MethodEventProcessorBase.InvokeHandler(EliteAPI.Event.Models.Abstractions.EventBase,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Processor.AttributeEventProcessor">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Processor.AttributeEventProcessor.RegisterHandlers">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Processor.EventsEventProcessor">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Processor.EventsEventProcessor.RegisterHandlers">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Provider.Abstractions.IEventProvider">
            <summary>
                Converts JSON events to <see cref="T:EliteAPI.Event.Models.Abstractions.EventBase" /> events
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Provider.Abstractions.IEventProvider.ProcessJsonEvent(System.String)">
            <summary>
                Processes a json event to <see cref="T:EliteAPI.Event.Models.Abstractions.EventBase" />
            </summary>
            <param name="json">The json event from the journal</param>
        </member>
        <member name="M:EliteAPI.Event.Provider.Abstractions.IEventProvider.RegisterEventClasses">
            <summary>
                Caches all the event classes
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Provider.EventProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Provider.EventProvider.ProcessJsonEvent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Provider.EventProvider.RegisterEventClasses">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException">
            <summary>
            Base class for all EliteAPI's exceptions
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.CargoFileNotFoundException">
            <summary>
            The exception that is thrown when the Cargo.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.CargoFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.CargoFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.CargoFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.EventNotImplementedException">
            <summary>
            The exception that is thrown when an event is not implemented
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.EventNotImplementedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.EventNotImplementedException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.EventNotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.EventNotImplementedException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.EventNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.EventNotImplementedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException">
            <summary>
            The exception that is thrown when an event is not implemented
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalDirectoryNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalDirectoryNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalDirectoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.JournalFileNotFoundException">
            <summary>
            The exception that is thrown when an event is not implemented
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalFileNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalFileNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalFileNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.MarketFileNotFoundException">
            <summary>
            The exception that is thrown when the Market.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.MarketFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.MarketFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.MarketFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.NavRouteFileNotFoundException">
            <summary>
            The exception that is thrown when the NavRoute.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.NavRouteFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.NavRouteFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.NavRouteFileNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.NavRouteFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.NavRouteFileNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.OutfittingFileNotFoundException">
            <summary>
            The exception that is thrown when the Status.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.OutfittingFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.OutfittingFileNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.OutfittingFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.OutfittingFileNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.OutfittingFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.OutfittingFileNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.ShipyardFileNotFoundException">
            <summary>
            The exception that is thrown when the Shipyard.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.ShipyardFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ShipyardFileNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.ShipyardFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ShipyardFileNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.ShipyardFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="!:ShipyardFileNotFound"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.StatusFileNotFoundException">
            <summary>
            The exception that is thrown when the Status.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.StatusFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.StatusFileNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.StatusFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.StatusFileNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.StatusFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.StatusFileNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.SupportFileNotFoundException">
            <summary>
            The exception that is thrown when a support JSON file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.SupportFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.SupportFileNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.SupportFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.SupportFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.SupportFileNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Journal.Directory.Abstractions.IJournalDirectoryProvider">
            <summary>
                Provides the journal directory
            </summary>
        </member>
        <member name="M:EliteAPI.Journal.Directory.Abstractions.IJournalDirectoryProvider.FindJournalDirectory">
            <summary>
                Finds the journal directory containing all the journal and support files
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Directory.JournalDirectoryProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Directory.JournalDirectoryProvider.FindJournalDirectory">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor">
            <summary>
                Processes journal files
            </summary>
        </member>
        <member name="E:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.NewJournalEntry">
            <summary>
                Triggered when a new json entry is made in the active journal file
            </summary>
        </member>
        <member name="M:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.ProcessJournalFile(System.IO.FileInfo,System.Boolean)">
            <summary>
                Hooks the specified journal file to <see cref="E:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.NewJournalEntry" /> and invokes <see cref="E:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.NewJournalEntry" /> when
                needed
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Processor.Abstractions.JournalEntry">
            <summary>
                A journal entry
            </summary>
        </member>
        <member name="P:EliteAPI.Journal.Processor.Abstractions.JournalEntry.Json">
            <summary>
                This entry's Json event
            </summary>
        </member>
        <member name="P:EliteAPI.Journal.Processor.Abstractions.JournalEntry.IsWhileCatchingUp">
            <summary>
                Whether this entry was ran before EliteAPI was started
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Processor.JournalProcessor">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Journal.Processor.JournalProcessor.NewJournalEntry">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Processor.JournalProcessor.ProcessJournalFile(System.IO.FileInfo,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Journal.Provider.Abstractions.IJournalProvider">
            <summary>
                Finds the journal and support files
            </summary>
        </member>
        <member name="M:EliteAPI.Journal.Provider.Abstractions.IJournalProvider.FindJournalFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the active journal file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="T:EliteAPI.Journal.Provider.JournalProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Provider.JournalProvider.FindJournalFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.NavRoute.Abstractions.INavRoute">
            <summary>
            Holds information about the current navigation route
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.Abstractions.INavRoute.Stops">
            <summary>
            All stops on the route
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.NavRoute.Stops">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.NavRoute.NavRoute.OnChange">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.NavRoute.NavRoute.EliteAPI#Status#Abstractions#IStatus#TriggerOnChange">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.NavRoute.RouteStop">
            <summary>
            Container class for a waypoint on the route
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.RouteStop.System">
            <summary>
            The name of the star system
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.RouteStop.Address">
            <summary>
            The address of the star system
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.RouteStop.Position">
            <summary>
            The position of the star system
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.RouteStop.Class">
            <summary>
            The class of the star system's main star
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Processor.Abstractions.IStatusProcessor">
            <summary>
                Processes status files
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.StatusUpdated">
            <summary>
                Triggered when the status file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.CargoUpdated">
            <summary>
                Triggered when the cargo file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.MarketUpdated">
            <summary>
                Triggered when the market file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipyardUpdated">
            <summary>
                Triggered when the shipyard file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.OutfittingUpdated">
            <summary>
                Triggered when the outfitting file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.NavRouteUpdated">
            <summary>
                Triggered when the navroute file is updated
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessStatusFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified status file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.StatusUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.StatusUpdated" /> when
                needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessCargoFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified cargo file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.CargoUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.CargoUpdated" /> when needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessMarketFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified market file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.MarketUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.MarketUpdated" /> when
                needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessShipyardFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified shipyard file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipyardUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipyardUpdated" /> when
                needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessOutfittingFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified outfitting file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.OutfittingUpdated" /> and invokes
                <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.OutfittingUpdated" /> when needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessNavRouteFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified navroute file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.NavRouteUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.NavRouteUpdated" /> when
                needed
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Processor.StatusProcessor">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.StatusUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.CargoUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.MarketUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.ShipyardUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.OutfittingUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.NavRouteUpdated">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessStatusFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessCargoFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessMarketFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessShipyardFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessOutfittingFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessNavRouteFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Provider.Abstractions.IStatusProvider">
            <summary>
                Provides status files
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindStatusFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the status file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindMarketFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the market file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindCargoFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the cargo file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindShipyardFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the shipyard file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindOutfittingFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the outfitting file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindNavRouteFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the navroute file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="T:EliteAPI.Status.Provider.StatusProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindStatusFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindMarketFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindCargoFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindShipyardFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindOutfittingFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindNavRouteFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Ship.Abstractions.IShip">
            <summary>
            Holds all information about the ship
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Flags">
            <summary>
            Overview of all ship flags
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Docked">
            <summary>
            Whether the ship is currently docked at a station or outpost
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Landed">
            <summary>
            Whether the ship is currently landed on a planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Gear">
            <summary>
            Whether the ship's landing gear is currently deployed
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Shields">
            <summary>
            Whether the ship's shields are currently active
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Supercruise">
            <summary>
            Whether the ship is currently in supercruise
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FlightAssist">
            <summary>
            Whether the ship's flight assist is enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Hardpoints">
            <summary>
            Whether the ship's weapons are currently deployed
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Winging">
            <summary>
            Whether the ship is currently winging with other commanders
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Lights">
            <summary>
            Whether the ship's exterior lights are currently enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.CargoScoop">
            <summary>
            Whether the ship's cargo scoop is currently deployed
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SilentRunning">
            <summary>
            Whether the ship is currently in silent running mode
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Scooping">
            <summary>
            Whether the ship is currently scooping fuel from a star
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvHandbreak">
            <summary>
            Whether the SRV handbreak is currently enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvTurrent">
            <summary>
            Whether the SRV turrent is currently enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvNearShip">
            <summary>
            Whether the SRV is currently near the mothership
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvDriveAssist">
            <summary>
            Whether the SRV has drive assist currently enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.MassLocked">
            <summary>
            Whether the ship is currently mass locked
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FsdCharging">
            <summary>
            Whether the ship's frame shift drive is currently charging
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FsdCooldown">
            <summary>
            Whether the ship's frame shift drive is currently cooling down
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.LowFuel">
            <summary>
            Whether the ship is currently low on fuel
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Overheating">
            <summary>
            Whether the ship is currently overheating
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.HasLatLong">
            <summary>
            Whether the ship currently has latitude and longitude information available
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InDanger">
            <summary>
            Whether the ship is currently in danger
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InInterdiction">
            <summary>
            Whether the ship is currently being interdicted
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InMothership">
            <summary>
            Whether the ship's commander is currently in the mothership
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InFighter">
            <summary>
            Whether the ship's commander is currently in the fighter
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InSrv">
            <summary>
            Whether the ship's commander is currently in the SRV
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.AnalysisMode">
            <summary>
            Whether the ship is currently in analysis mode
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.NightVision">
            <summary>
            Whether the ship currently has night vision enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.AltitudeFromAverageRadius">
            <summary>
            Whether the ship's current altitude is being calculated by the planet's average radius
            See also <see cref="P:EliteAPI.Status.Ship.Abstractions.IShip.Altitude"/>
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FsdJump">
            <summary>
            Whether the ship is currently in a jump to another star system
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvHighBeam">
            <summary>
            Whether the ship's SRV high beam is currently active
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Pips">
            <summary>
            The ship's currently energy distribution configuration
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FireGroup">
            <summary>
            The ship's current firegroup
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.GuiFocus">
            <summary>
            The ship's current interface focus
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Fuel">
            <summary>
            The ship's current fuel information
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Cargo">
            <summary>
            The ship's currently amount of cargo in tonnes
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.LegalState">
            <summary>
            The ship's current legal state
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Latitude">
            <summary>
            The ship's current latitude on the planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Altitude">
            <summary>
            The ship's current altitude on the planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Longitude">
            <summary>
            The ship's current longitude on the planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Heading">
            <summary>
            The ship's current heading on the planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Body">
            <summary>
            The name of the body the ship is currently visiting
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.BodyRadius">
            <summary>
            The radius of the currently visiting body
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Ship.Abstractions.IShip.OnChange">
            <summary>
            Triggered when any of the properties have been updated
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Ship.Ship">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Flags">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Docked">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Landed">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Gear">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Shields">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Supercruise">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FlightAssist">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Hardpoints">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Winging">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Lights">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.CargoScoop">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SilentRunning">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Scooping">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvHandbreak">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvTurrent">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvNearShip">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvDriveAssist">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.MassLocked">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FsdCharging">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FsdCooldown">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.LowFuel">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Overheating">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.HasLatLong">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InDanger">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InInterdiction">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InMothership">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InFighter">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InSrv">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.AnalysisMode">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.NightVision">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.AltitudeFromAverageRadius">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FsdJump">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvHighBeam">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Pips">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FireGroup">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.GuiFocus">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Fuel">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Cargo">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.LegalState">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Latitude">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Altitude">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Longitude">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Heading">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Body">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.BodyRadius">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Ship.Ship.OnChange">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Ship.ShipFuel">
            <summary>
            Container class for information about the ship's fuel situation
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipFuel.Main">
            <summary>
            The ship's current amount of fuel left in the main fuel tank 
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipFuel.Reservoir">
            <summary>
            The ship's current amount of fuel left in the reservoir fuel tank 
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Ship.ShipGuiFocus">
            <summary>
                Ship GUI focus
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.NoFocus">
            <summary>
                There is no focus
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.InternalPanel">
            <summary>
                The internal (right) panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.ExternalPanel">
            <summary>
                The external (left) panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.CommsPanel">
            <summary>
                The communication panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.RolePanel">
            <summary>
                The role panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.StationServices">
            <summary>
                Station services
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.GalaxyMap">
            <summary>
                The galaxy map
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.SystemMap">
            <summary>
                The system map
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.Orrery">
            <summary>
                The orrery
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.FssMode">
            <summary>
                Full spectrum scanner mode
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.SaaMode">
            <summary>
                Saa mode
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.Codex">
            <summary>
                The codex
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Ship.ShipLegalState">
            <summary>
                Legal ship states
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Clean">
            <summary>
                Clean
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.IllegalCargo">
            <summary>
                Illegal cargo on-board
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Speeding">
            <summary>
                Speeding at stations
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Wanted">
            <summary>
                Wanted
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Hostile">
            <summary>
                Hostile
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.PassengerWanted">
            <summary>
                Passenger on ship is wanted
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Warrant">
            <summary>
                Warrant for arrest
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipPips.System">
            <summary>
                Amount of half pips set to systems
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipPips.Engines">
            <summary>
                Amount of half pips set to engines
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipPips.Weapons">
            <summary>
                Amount of half pips set to weapons
            </summary>
        </member>
        <member name="T:EliteAPI.Status.StatusProperty`1">
            <summary>
            Container class for a status property
            </summary>
        </member>
        <member name="P:EliteAPI.Status.StatusProperty`1.Value">
            <summary>
            The value of this property
            </summary>
        </member>
        <member name="F:EliteAPI.Status.StatusProperty`1.OnChange">
            <summary>
            Triggered whenever this property is changed
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
