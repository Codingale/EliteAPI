<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EliteAPI</name>
    </assembly>
    <members>
        <member name="T:EliteAPI.Abstractions.IEliteDangerousAPI">
            <summary>
                EliteAPI
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.Version">
            <summary>
                EliteAPI's version
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.Events">
            <summary>
                Container for all events
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.Status">
            <summary>
                Container for the ship's current status
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.IsRunning">
            <summary>
                Whether the api is currently running
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousAPI.HasCatchedUp">
            <summary>
                Whether the api has catched up on past event in this session
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IEliteDangerousAPI.InitializeAsync">
            <summary>
                Initializes the api
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IEliteDangerousAPI.StartAsync">
            <summary>
                Starts the api
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IEliteDangerousAPI.StopAsync">
            <summary>
                Stops the api
            </summary>
        </member>
        <member name="T:EliteAPI.Bindings.Provider.Abstractions.IBindingsProvider">
            <summary>
            Finds the active keybindings schema file
            </summary>
        </member>
        <member name="M:EliteAPI.Bindings.Provider.Abstractions.IBindingsProvider.FindBindingsFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the active keybindings file
            </summary>
            <param name="bindingsDirectory">The keybindings directory</param>
        </member>
        <member name="M:EliteAPI.Bindings.Provider.BindingsProvider.FindBindingsFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.EliteDangerousAPI">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.HasCatchedUp">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.Version">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.Events">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousAPI.Status">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousAPI.InitializeAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousAPI.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousAPI.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousAPIExtensions.AddEliteAPI(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EliteAPI.EliteDangerousAPIConfiguration})">
            <summary>
                Adds all EliteAPI's necessary services to the <seealso cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </summary>
        </member>
        <member name="M:EliteAPI.EliteDangerousAPIConfiguration.AddEventModule``1">
            <summary>
                Add an event module to EliteAPI
            </summary>
            <typeparam name="T">The event module to be added</typeparam>
        </member>
        <member name="M:EliteAPI.EliteDangerousAPIConfiguration.ClearProcessors">
            <summary>
                Remove the default event processors
            </summary>
        </member>
        <member name="M:EliteAPI.EliteDangerousAPIConfiguration.AddProcessor``1">
            <summary>
                Adds an event processor
            </summary>
            <typeparam name="T">The event processor to be used</typeparam>
        </member>
        <member name="T:EliteAPI.Event.Models.Abstractions.EventBase">
            <summary>
                An in-game event
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.EventBase.Timestamp">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.EventBase.Event">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Models.Abstractions.IEvent">
            <summary>
                An in-game event
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.IEvent.Timestamp">
            <summary>
                The timestamp of the event
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.IEvent.Event">
            <summary>
                The name of the event
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Processor.Abstractions.IEventProcessor">
            <summary>
                Invokes registered event-handlers
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.IEventProcessor.RegisterHandlers">
            <summary>
                Finds, registers, and caches the event-handlers
            </summary>
            <returns></returns>
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.IEventProcessor.InvokeHandler(EliteAPI.Event.Models.Abstractions.EventBase,System.Boolean)">
            <summary>
                Invokes the registered handler for this event
            </summary>
            <param name="eventBase">The event to be invoked</param>
            <param name="isWhileCatchingUp">Whether this event was ran before EliteAPI was started</param>
        </member>
        <member name="P:EliteAPI.Event.Processor.Abstractions.MethodEventProcessorBase.Cache">
            <summary>
                Methods to invoke, mapped to the name of a event
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.MethodEventProcessorBase.RegisterHandlers">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.MethodEventProcessorBase.InvokeHandler(EliteAPI.Event.Models.Abstractions.EventBase,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Processor.AttributeEventProcessor">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Processor.AttributeEventProcessor.RegisterHandlers">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Processor.EventsEventProcessor">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Processor.EventsEventProcessor.RegisterHandlers">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Provider.Abstractions.IEventProvider">
            <summary>
                Converts JSON events to <see cref="T:EliteAPI.Event.Models.Abstractions.EventBase" /> events
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Provider.Abstractions.IEventProvider.ProcessJsonEvent(System.String)">
            <summary>
                Processes a json event to <see cref="T:EliteAPI.Event.Models.Abstractions.EventBase" />
            </summary>
            <param name="json">The json event from the journal</param>
        </member>
        <member name="M:EliteAPI.Event.Provider.Abstractions.IEventProvider.RegisterEventClasses">
            <summary>
                Caches all the event classes
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Provider.EventProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Provider.EventProvider.ProcessJsonEvent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Provider.EventProvider.RegisterEventClasses">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Exceptions.NotImplementedEventException">
            <summary>
            Thrown when an event is not implemented
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Directory.Abstractions.IJournalDirectoryProvider">
            <summary>
                Provides the journal directory
            </summary>
        </member>
        <member name="M:EliteAPI.Journal.Directory.Abstractions.IJournalDirectoryProvider.FindJournalDirectory">
            <summary>
                Finds the journal directory containing all the journal and support files
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Directory.JournalDirectoryProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Directory.JournalDirectoryProvider.FindJournalDirectory">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor">
            <summary>
                Processes journal files
            </summary>
        </member>
        <member name="E:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.NewJournalEntry">
            <summary>
                Triggered when a new json entry is made in the active journal file
            </summary>
        </member>
        <member name="M:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.ProcessJournalFile(System.IO.FileInfo,System.Boolean)">
            <summary>
                Hooks the specified journal file to <see cref="E:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.NewJournalEntry" /> and invokes <see cref="E:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.NewJournalEntry" /> when
                needed
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Processor.Abstractions.JournalEntry">
            <summary>
                A journal entry
            </summary>
        </member>
        <member name="P:EliteAPI.Journal.Processor.Abstractions.JournalEntry.Json">
            <summary>
                This entry's Json event
            </summary>
        </member>
        <member name="P:EliteAPI.Journal.Processor.Abstractions.JournalEntry.IsWhileCatchingUp">
            <summary>
                Whether this entry was ran before EliteAPI was started
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Processor.JournalProcessor">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Journal.Processor.JournalProcessor.NewJournalEntry">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Processor.JournalProcessor.ProcessJournalFile(System.IO.FileInfo,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Journal.Provider.Abstractions.IJournalProvider">
            <summary>
                Finds the journal and support files
            </summary>
        </member>
        <member name="M:EliteAPI.Journal.Provider.Abstractions.IJournalProvider.FindJournalFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the active journal file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="T:EliteAPI.Journal.Provider.JournalProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Provider.JournalProvider.FindJournalFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Models.RawShipStatus">
            <summary>
                Only used for deserialization of the raw Status.json file
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Models.ShipFuel">
            <summary>
                Container for information about the ship's fuel situation
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Models.ShipFuel.Main">
            <summary>
                The amount of fuel left in the main tank, in tonnes
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Models.ShipFuel.Reservoir">
            <summary>
                The amount of fuel left in the reservoir tank, in tonnes
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Models.ShipGuiFocus">
            <summary>
                Ship GUI focus
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.NoFocus">
            <summary>
                There is no focus
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.InternalPanel">
            <summary>
                The internal (right) panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.ExternalPanel">
            <summary>
                The external (left) panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.CommsPanel">
            <summary>
                The communication panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.RolePanel">
            <summary>
                The role panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.StationServices">
            <summary>
                Station services
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.GalaxyMap">
            <summary>
                The galaxy map
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.SystemMap">
            <summary>
                The system map
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.Orrery">
            <summary>
                The orrery
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.FssMode">
            <summary>
                Full spectrum scanner mode
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.SaaMode">
            <summary>
                Saa mode
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipGuiFocus.Codex">
            <summary>
                The codex
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Models.ShipLegalState">
            <summary>
                Legal ship states
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipLegalState.Clean">
            <summary>
                Clean
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipLegalState.IllegalCargo">
            <summary>
                Illegal cargo on-board
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipLegalState.Speeding">
            <summary>
                Speeding at stations
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipLegalState.Wanted">
            <summary>
                Wanted
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipLegalState.Hostile">
            <summary>
                Hostile
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipLegalState.PassengerWanted">
            <summary>
                Passenger on ship is wanted
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipLegalState.Warrant">
            <summary>
                Warrant for arrest
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Models.ShipPips.System">
            <summary>
                Amount of half pips set to systems
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Models.ShipPips.Engines">
            <summary>
                Amount of half pips set to engines
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Models.ShipPips.Weapons">
            <summary>
                Amount of half pips set to weapons
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Models.ShipStatusProperty`1">
            <summary>
                Container for status properties
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Models.ShipStatusProperty`1.OnChange">
            <summary>
                Triggered whenever this property is changed
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Models.ShipStatusProperty`1.Value">
            <summary>
                The value of this property
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Processor.Abstractions.IStatusProcessor">
            <summary>
                Processes status files
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.StatusUpdated">
            <summary>
                Triggered when the status file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.CargoUpdated">
            <summary>
                Triggered when the cargo file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.MarketUpdated">
            <summary>
                Triggered when the market file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipyardUpdated">
            <summary>
                Triggered when the shipyard file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.OutfittingUpdated">
            <summary>
                Triggered when the outfitting file is updated
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessStatusFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified status file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.StatusUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.StatusUpdated" /> when
                needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessCargoFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified cargo file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.CargoUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.CargoUpdated" /> when needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessMarketFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified market file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.MarketUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.MarketUpdated" /> when
                needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessShipyardFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified shipyard file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipyardUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipyardUpdated" /> when
                needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessOutfittingFile(System.IO.FileInfo)">
            <summary>
                Hooks the specified outfitting file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.OutfittingUpdated" /> and invokes
                <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.OutfittingUpdated" /> when needed
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Processor.StatusProcessor">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.StatusUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.CargoUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.MarketUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.ShipyardUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.OutfittingUpdated">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessStatusFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessCargoFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessMarketFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessShipyardFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessOutfittingFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Provider.Abstractions.IStatusProvider">
            <summary>
                Provides status files
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindStatusFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the status file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindMarketFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the market file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindCargoFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the cargo file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindShipyardFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the shipyard file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindOutfittingFile(System.IO.DirectoryInfo)">
            <summary>
                Finds the outfitting file from the specified journal directory
            </summary>
            <param name="journalDirectory">The journal directory</param>
        </member>
        <member name="T:EliteAPI.Status.Provider.StatusProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindStatusFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindMarketFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindCargoFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindShipyardFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindOutfittingFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
    </members>
</doc>
