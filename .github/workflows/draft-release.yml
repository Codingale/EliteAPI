name: Draft new release
on:
  milestone:
    types: [closed]

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x   
      
    - name: Setup Node.js environment
      uses: actions/setup-node@v2.4.0
      
    - name: Setup Electron.NET
      run: dotnet tool install ElectronNET.CLI -g
    
    - name: Install dependencies
      run: npm install
      working-directory: ./EliteAPI.Dashboard/frontend
    
    - name: Build frontend
      run: npm run build
      working-directory: ./EliteAPI.Dashboard/frontend
    
    - name: Build application
      run: electronize build /target win
      working-directory: ./EliteAPI.Dashboard

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: eliteapi
        path: ./EliteAPI.Dashboard/bin/Desktop

  draft-release:
    name: Draft release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create release notes
        uses: docker://decathlon/release-notes-generator-action:2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v2
        with:
          name: release-notes
          path: release_file.md

      - name: Setup GitVersion
        run: dotnet tool install --global GitVersion.Tool --version 5.6.0

      - name: Fetch for GitVersion
        run: git fetch --tags --unshallow

      - name: Fetch main for GitVersion
        if: github.ref != 'refs/heads/main'
        run: git branch --create-reflog main origin/main

      - name: Get version
        run: dotnet-gitversion /output buildserver

      - name: Read release notes
        id: NOTES
        uses: juliangruber/read-file-action@v1
        with:
          path: release_file.md

      - name: Draft new release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GitVersion_LegacySemVerPadded }}
          release_name: v${{ env.GitVersion_LegacySemVer }}
          body: |
            # ${{ github.event.repository.name }} v${{ env.GitVersion_LegacySemVer }} has been released
            ```
            dotnet add package {{ github.event.repository.name }} --version ${{ env.GitVersion_NuGetVersionV2 }}
            ```
            ${{steps.NOTES.outputs.content}}
          draft: true
          prerelease: ${{ env.GitVersion_PreReleaseLabel != '' }}
